generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TypeOperation {
  WITHDRAW
  DEPOSIT
}

enum TypeResult {
  GREEN
  RED
  CLOSED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  Account       Account[]
  Session       Session[]
  UserOperation UserOperation[]
  BettingHouse  BettingHouse[]
  UserBet       UserBet[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BettingHouse {
  id            String          @id @default(uuid())
  userId        String
  user          User            @relation(fields: [userId], references: [id])
  name          String          @db.VarChar(60)
  UserBet       UserBet[]
  UserOperation UserOperation[]

  @@map("betting_houses")
}

model UserOperation {
  id        String        @id @default(uuid())
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  operation TypeOperation
  date      DateTime      @db.Timestamp

  bettingHouseId String
  betting_house  BettingHouse @relation(fields: [bettingHouseId], references: [id])

  @@map("operations")
}

model UserBet {
  id              String     @id @default(uuid())
  odd             Decimal
  bank_percentage Decimal?
  value           Decimal
  result          TypeResult
  closed_value    Decimal?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  bettingHouseId String
  betting_house  BettingHouse @relation(fields: [bettingHouseId], references: [id])

  date DateTime @default(now())

  @@map("bets")
}
